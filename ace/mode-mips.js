/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from riscv.tmlanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var MIPSAssemblerHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "support.function.pseudo.mips",
            regex: /\b(?:mul|abs|div|divu|mulo|mulou|neg|negu|not|rem|remu|rol|ror|li|seq|sge|sgeu|sgt|sgtu|sle|sleu|sne|b|beqz|bge|bgeu|bgt|bgtu|ble|bleu|blt|bltu|bnez|la|ld|ulh|ulhu|ulw|sd|ush|usw|move|mfc1\.d|l\.d|l\.s|s\.d|s\.s)\b/,
            comment: "ok actually this are instructions, but one also could call them funtionsâ€¦"
        }, {
            token: "support.function.mips",
            regex: /\b(?:abs\.d|abs\.s|add|add\.d|add\.s|addi|addiu|addu|and|andi|bc1f|bc1t|beq|bgez|bgezal|bgtz|blez|bltz|bltzal|bne|break|c\.eq\.d|c\.eq\.s|c\.le\.d|c\.le\.s|c\.lt\.d|c\.lt\.s|ceil\.w\.d|ceil\.w\.s|clo|clz|cvt\.d\.s|cvt\.d\.w|cvt\.s\.d|cvt\.s\.w|cvt\.w\.d|cvt\.w\.s|div|div\.d|div\.s|divu|eret|floor\.w\.d|floor\.w\.s|j|jal|jalr|jr|lb|lbu|lh|lhu|ll|lui|lw|lwc1|lwl|lwr|madd|maddu|mfc0|mfc1|mfhi|mflo|mov\.d|mov\.s|movf|movf\.d|movf\.s|movn|movn\.d|movn\.s|movt|movt\.d|movt\.s|movz|movz\.d|movz\.s|msub|mtc0|mtc1|mthi|mtlo|mul|mul\.d|mul\.s|mult|multu|neg\.d|neg\.s|nop|nor|or|ori|round\.w\.d|round\.w\.s|sb|sc|sdc1|sh|sll|sllv|slt|slti|sltiu|sltu|sqrt\.d|sqrt\.s|sra|srav|srl|srlv|sub|sub\.d|sub\.s|subu|sw|swc1|swl|swr|syscall|teq|teqi|tge|tgei|tgeiu|tgeu|tlt|tlti|tltiu|tltu|trunc\.w\.d|trunc\.w\.s|xor|xori)\b/
        }, {
            token: "storage.type.mips",
            regex: /\.(?:ascii|asciiz|byte|data|double|float|half|kdata|ktext|space|text|word|set\s*(?:noat|at))\b/
        }, {
            token: "storage.modifier.mips",
            regex: /\.(?:align|extern||globl)\b/
        }, {
            token: [
                "entity.name.function.label.mips",
                "meta.function.label.mips"
            ],
            regex: /\b([A-Za-z0-9_]+)(:)/
        }, {
            token: [
                "punctuation.definition.variable.mips",
                "variable.other.register.usable.by-number.mips"
            ],
            regex: /(\$)(0|[2-9]|1[0-9]|2[0-5]|2[89]|3[0-1])\b/
        }, {
            token: [
                "punctuation.definition.variable.mips",
                "variable.other.register.usable.by-name.mips"
            ],
            regex: /(\$)(zero|v[01]|a[0-3]|t[0-9]|s[0-7]|gp|sp|fp|ra)\b/
        }, {
            token: [
                "punctuation.definition.variable.mips",
                "variable.other.register.reserved.mips"
            ],
            regex: /(\$)(at|k[01]|1|2[67])\b/
        }, {
            token: [
                "punctuation.definition.variable.mips",
                "variable.other.register.usable.floating-point.mips",
                "variable.other.register.usable.floating-point.mips"
            ],
            regex: /(\$)(f)([0-9]|1[0-9]|2[0-9]|3[0-1])\b/
        }, {
            token: "constant.numeric.float.mips",
            regex: /\b\d+\.\d+\b/
        }, {
            token: "constant.numeric.integer.mips",
            regex: /\b(?:\d+|0(?:x|X)[a-fA-F0-9]+)\b/
        }, {
            token: "punctuation.definition.string.begin.mips",
            regex: /"/,
            push: [{
                token: "punctuation.definition.string.end.mips",
                regex: /"/,
                next: "pop"
            }, {
                token: "constant.character.escape.mips",
                regex: /\\[rnt\\"]/
            }, {
                defaultToken: "string.quoted.double.mips"
            }]
        }, {
            token: "punctuation.definition.comment.mips",
            regex: /#/,
            push: [{
                token: "comment.line.number-sign.mips",
                regex: /$/,
                next: "pop"
            }, {
                defaultToken: "comment.line.number-sign.mips"
            }]
        }]
    }
    
    this.normalizeRules();
};

MIPSAssemblerHighlightRules.metaData = {
    fileTypes: ["s", "mips", "spim", "asm"],
    keyEquivalent: "^~M",
    name: "MIPS Assembler",
    scopeName: "source.mips"
}


oop.inherits(MIPSAssemblerHighlightRules, TextHighlightRules);

exports.MIPSAssemblerHighlightRules = MIPSAssemblerHighlightRules;
});